TITLE: Learning from data: Logistic Regression
AUTHOR: Christian ForssÃ©n {copyright, 2018-present|CC BY-NC} at Department of Physics, Chalmers University of Technology, Sweden
AUTHOR: Morten Hjorth-Jensen at Department of Physics, University of Oslo & Department of Physics and Astronomy and National Superconducting Cyclotron Laboratory, Michigan State University
DATE: today

!split 
======= Logistic Regression =======

In linear regression our main interest was centered on learning the
coefficients of a functional fit (say a polynomial) in order to be
able to predict the response of a continuous variable on some unseen
data. The fit to the continuous variable $y_i$ is based on some
independent variables $\boldsymbol{x}_i$. Linear regression resulted in
analytical expressions for standard ordinary Least Squares or Ridge
regression (in terms of matrices to invert) for several quantities,
ranging from the variance and thereby the confidence intervals of the
parameters $\boldsymbol{w}$ to the mean squared error. If we can invert
the product of the design matrices, linear regression gives then a
simple recipe for fitting our data.


Classification problems, however, are concerned with outcomes taking
the form of discrete variables (i.e. categories). We may for example,
on the basis of DNA sequencing for a number of patients, like to find
out which mutations are important for a certain disease; or based on
scans of various patients' brains, figure out if there is a tumor or
not; or given a specific physical system, we'd like to identify its
state, say whether it is an ordered or disordered system (typical
situation in solid state physics); or classify the status of a
patient, whether she/he has a stroke or not and many other similar
situations.

The most common situation we encounter when we apply logistic
regression is that of two possible outcomes, normally denoted as a
binary outcome, true or false, positive or negative, success or
failure etc.

!split
===== Optimization and Deep learning =====

Logistic regression will also serve as our stepping stone towards
neural network algorithms and supervised deep learning. For logistic
learning, the minimization of the cost function leads to a non-linear
equation in the parameters $\boldsymbol{w}$. The optimization of the
problem calls therefore for minimization algorithms. This forms the
bottle neck of all machine learning algorithms, namely how to find
reliable minima of a multi-variable function. This leads us to the
family of gradient descent methods. The latter are the working horses
of basically all modern machine learning algorithms.

We note also that many of the topics discussed here on logistic 
regression are also commonly used in modern supervised Deep Learning
models, as we will see later.


!split 
===== Basics and notation =====

We consider the case where the dependent variables (also called the
responses, targets, or outcomes) are discrete and only take values
from $k=0,\dots,K-1$ (i.e. $K$ classes).

The goal is to predict the
output classes from the design matrix $\boldsymbol{X}\in\mathbb{R}^{n\times p}$
made of $n$ samples, each of which carries $p$ features or predictors. The
primary goal is to identify the classes to which new unseen samples
belong.

!bnotice
We will use the following notation:
* $\boldsymbol{x}$: independent (input) variables, typically a vector of length $p$. A matrix of $n$ instances of input vectors is denoted $\boldsymbol{X}$, and is also known as the *design matrix*.
* $t$: dependent, response variable, also known as the target. For binary classification the target $t^{(i)} \in \{0,1\}$. For $K$ different classes we would have $t^{(i)} \in \{1, 2, \ldots, K\}$. A vector of $n$ targets from $n$ instances of data is denoted $\boldsymbol{t}$.
* $\mathcal{D}$: is the data, where $\mathcal{D}^{(i)} = \{ (\boldsymbol{x}^{(i)}, t^{(i)} ) \}$.
* $\boldsymbol{y}$: is the output of our classifier that will be used to quantify probabilities $p_{t=C}$ that the target belongs to class $C$.
* $\boldsymbol{w}$: will be the parameters (weights) of our classification model.

The subscript notation $y_i$ will here be used in parallel with the superscript one, $y^{(i)}$, for which the author apologizes.
!enotice
 
Let us specialize to the case of two classes only, with outputs
$t_i=0$ and $t_i=1$. That is


!bt
\[
t_i = \begin{bmatrix} 0 \\  1 \end{bmatrix}
= \begin{bmatrix} \mathrm{no}\\  \mathrm{yes} \end{bmatrix}.
\]
!et



!split
===== Linear classifier =====

Before moving to the logistic model, let us try to use our linear
regression model to classify these two outcomes. We could for example
fit a linear model to the default case if $y_i > 0.5$ and the no
default case $y_i \leq 0.5$.

We would then have our 
weighted linear combination, namely 
!bt
\begin{equation}
\boldsymbol{y} = \boldsymbol{X}^T\boldsymbol{w} +  \boldsymbol{\epsilon},
\end{equation}
!et
where $\boldsymbol{y}$ is a vector representing the possible outcomes, $\boldsymbol{X}$ is our
$n\times p$ design matrix and $\boldsymbol{w}$ represents our estimators/predictors.

!split
===== Some selected properties =====

The main problem with our function is that it takes values on the
entire real axis. In the case of logistic regression, however, the
labels $t_i$ are discrete variables. 

One simple way to get a discrete output is to have sign
functions that map the output of a linear regressor to values $y_i \in \{ 0, 1 \}$,
$f(\tilde{y}_i)=sign(\tilde{y}_i)=1$ if $\tilde{y}_i\ge 0$ and 0 if otherwise. 
We will encounter this model in our first demonstration of neural networks. Historically it is called the ``perceptron'' model in the machine learning
literature. This model is extremely simple. However, in many cases it is more
favorable to use a ``soft'' classifier that outputs
the probability of a given category. This leads us to the logistic function.


!split
===== The logistic function =====

The perceptron is an example of a ``hard classification'' model. We
will encounter this model when we discuss neural networks as
well. Each datapoint is deterministically assigned to a category (i.e
$y_i=0$ or $y_i=1$). In many cases, it is favorable to have a ``soft''
classifier that outputs the probability of a given category rather
than a single value. For example, given $\boldsymbol{x}_i$, the classifier
outputs the probability of being in a category $k$.  Logistic regression
is the most common example of a so-called soft classifier. In logistic
regression, the probability that a data point $\boldsymbol{x}_i$
belongs to a category $t_i=\{0,1\}$ is given by the so-called logit function (or Sigmoid) which is meant to represent the likelihood for a given event, 
!bt
\[
y(\boldsymbol{x}; \boldsymbol{w}) = y(a) = \frac{1}{1+e^{-a}} = \frac{e^a}{1+e^a},
\]
!et
where the so called *activation* $a = a(\boldsymbol{x}; \boldsymbol{w})$. 

* Most frequently one uses $a = a(\boldsymbol{x}, \boldsymbol{w}) \equiv \boldsymbol{x} \cdot \boldsymbol{w}$.
* Note that $1-y(a)= y(-a)$.
* The sigmoid function can be motivated in several different ways. E.g. in information theory this function represents the probability of a signal $s=1$ rather than $s=0$ when transmission occurs over a noisy channel.

!split
===== Examples of likelihood functions used in logistic regression and neural networks =====

FIGURE:[fig/logistic_functions.png, width=600 frac=0.8] The sigmoid, step,and (normalized) tanh functions; three common classifier functions used in logistic regression and neural networks. label{fig:logistic}

!split
=====  A binary classifier with two parameters =====

We assume now that we have two classes with $t_i$ either $0$ or $1$. Furthermore we assume also that we have only two parameters $w_0, w_1$ and the predictors $\boldsymbol{x}_i = \{ 1, x_i \}$ defining the Sigmoid function. We can produce probabilities from the classifier output $y_i$
!bt
\begin{align*}
p(t_i=1|x_i,\boldsymbol{w}) &= \frac{y(a_i)}{1 + y(a_i)} = \frac{\exp{(w_0+w_1x_i)}}{1+\exp{(w_0+w_1x_i)}},\nonumber\\
p(t_i=0|x_i,\boldsymbol{w}) &= 1 - p(t_i=1|x_i,\boldsymbol{w}) = \frac{1}{1 + y(a_i)} ,
\end{align*}
!et
where $\boldsymbol{w} = \{ w_0, w_1\}$ are the weights we wish to extract from training data. 

!split 
=== Maximum likelihood ===

In order to define the total likelihood for all possible outcomes from a  
dataset $\mathcal{D}=\{(x_i, t_i,)\}$, with the binary labels
$t_i\in\{0,1\}$ and where the data points are drawn independently, we use the binary version of the "Maximum Likelihood Estimation":"https://en.wikipedia.org/wiki/Maximum_likelihood_estimation" (MLE) principle. 
We express the 
likelihood in terms of the product of the individual probabilities of a specific outcome $t_i$, that is 
!bt
\begin{align*}
\mathcal{L} = P(\mathcal{D}|\boldsymbol{w})& = \prod_{i=1}^n \left[p(t_i=1|x_i,\boldsymbol{w})\right]^{t_i}\left[1-p(t_i=1|x_i,\boldsymbol{w}))\right]^{1-t_i}\nonumber \\
\end{align*}
!et
from which we obtain the log-likelihood 
!bt
\[
L = \log(\mathcal{L}) = \sum_{i=1}^n \left( t_i\log{p(t_i=1|x_i,\boldsymbol{w})} + (1-t_i)\log\left[1-p(t_i=1|x_i,\boldsymbol{w}))\right]\right).
\]
!et

The _cost/loss_ function is then defined as the negative log-likelihood
!bt
\[
\mathcal{C}(\boldsymbol{w}) \equiv -L = -\sum_{i=1}^n \left( t_i\log{p(t_i=1|x_i,\boldsymbol{w})} + (1-t_i)\log\left[1-p(t_i=1|x_i,\boldsymbol{w}))\right]\right).
\]
!et

!split
=== The cost function rewritten as cross entropy ===

Using the definitions of the probabilities we can rewrite the _cost/loss_ function as
!bt
\[
\mathcal{C}(\boldsymbol{w}) = -\sum_{i=1}^n \left( t_i\log{ y(x_i,\boldsymbol{w})} + (1-t_i)\log\left[ 1-y( x_i,\boldsymbol{w}) \right] \right),
\]
!et
which can be recognised as the relative entripy between the empirical probability distribution $(t_i, 1-t_i)$ and the probability distribution predicted by the classifier $(y_i, 1-y_i)$.
Therefore, this cost function is known in statistics as the _cross entropy_. 

Using specifically the Sigmoid activation function with two weights, and reordering the logarithms, we can rewrite the _cost/loss_ function as
!bt
\[
\mathcal{C}(\boldsymbol{w}) = \sum_{i=1}^n  \left[ t_i(w_0+w_1 x_i) -\log{(1+\exp{(w_0+w_1x_i)})} \right].
\]
!et

The maximum likelihood estimator is defined as the set of parameters (weights) that maximizes the log-likelihood (where we maximize with respect to $w$).

Since the cost (error) function is here defined as the negative log-likelihood, for logistic regression, we have that
!bt
\[
\mathcal{C}(\boldsymbol{w})=-\sum_{i=1}^n  \left[ y_i (w_0+w_1x_i) -\log{ \left( 1+\exp{(w_0+w_1x_i)} \right) } \right].
\]
!et

!split
=== Regularization ===
In practice, just as for linear regression, one often supplements the cross-entropy cost function with additional regularization terms, usually $L_1$ and $L_2$ regularization. This introduces hyperparameters into the classifier.

In particular, Lasso regularization is obtained by defining another cost function
!bt
\[
\mathcal{C}_W (\boldsymbol{w}) \equiv \mathcal{C} (\boldsymbol{w}) + \alpha E_W (\boldsymbol{w})
\]
!et
where $E_W (\boldsymbol{w}) = \frac{1}{2} \sum_i w_i^2$ and $\alpha$ is known as the *weight decay*.

!bquestion
Can you motivate why $\alpha$ is known as the weight decay? *Hint*: Recall the origin of this regularizer from a Bayesian perspective.
!equestion


!split
===  Minimizing the cross entropy ===

The cross entropy is a convex function of the weights $\boldsymbol{w}$ and,
therefore, any local minimizer is a global minimizer. 


Minimizing this cost function (here without regularization term) with respect to the two parameters $w_0$ and $w_1$ we obtain

!bt
\[
\frac{\partial \mathcal{C}(\boldsymbol{w})}{\partial w_0} = -\sum_{i=1}^n  \left(t_i -\frac{\exp{(w_0+w_1x_i)}}{1+\exp{(w_0+w_1x_i)}}\right),
\]
!et
and 
!bt
\[
\frac{\partial \mathcal{C}(\boldsymbol{w})}{\partial w_1} = -\sum_{i=1}^n  \left(t_i x_i -x_i\frac{\exp{(w_0+w_1x_i)}}{1+\exp{(w_0+w_1x_i)}}\right).
\]
!et

!split
===  A more compact expression ===

Let us now define a vector $\boldsymbol{t}$ with $n$ elements $t_i$, an
$n\times 2$ matrix $\boldsymbol{X}$ which contains the $(1, x_i)$ predictor variables, and a
vector $\boldsymbol{y}$ of fitted probabilities $y_i = p(t_i = 1 \vert x_i,\boldsymbol{w})$. We can then rewrite the first
derivative of cost function in matrix form

!bt
\[
\frac{\partial \mathcal{C}(\boldsymbol{w})}{\partial \boldsymbol{w}} = -\boldsymbol{X}^T\left( \boldsymbol{t}-\boldsymbol{y} \right). 
\]
!et

If we in addition define a diagonal matrix $\boldsymbol{W}$ with elements 
$W_{ii} = p(t_i = 1 \vert x_i,\boldsymbol{w}) (1-p(t_i=1\vert x_i,\boldsymbol{w})$, we can obtain a compact expression of the second derivative as 

!bt
\[
\frac{\partial^2 \mathcal{C}(\boldsymbol{w})}{\partial \boldsymbol{w}\partial \boldsymbol{w}^T} = \boldsymbol{X}^T\boldsymbol{W}\boldsymbol{X}. 
\]
!et

!split
=== A learning algorithm ===

!bnotice
Having access to the first derivative we can define an *on-line learning rule* as follows:
* For each input $i$, compute the error $e_i = t_i - y_i$.
* Adjust the weights in a direction that would reduce this error: $\Delta w_j = \eta e_i x_{j,i}$.
* The parameter $\eta$ is called the *learning rate*.
This learning algorithm is a variant of *stochastic learning*.
!enotice

Alternatively, one can perform *batch learning* for which multiple instances are combined into a batch, and the weights are adjusted following the matrix expression stated above. One can then repeat the training multiple times where each iteration consists of a *forward pass* (computing the outputs $\boldsymbol{y}$ given a set of weights $\boldsymbol{w}$) and *back-propagation* in which the gradient is computed and the weights are adjusted. At the end, one hopes to have reached an optimal set of weights.

!split
=== Extending to more predictors ===

Within a binary classification problem, we can easily expand our model to include multiple predictors. Our activation function is then (with $p$ predictors)
!bt
\[
a( \boldsymbol{x}_i, \boldsymbol{w} ) = w_0 + w_1 x_{1,i} + w_2 x_{2,i} + \dots + w_p x_{p,i}.
\]
!et
Defining $\boldsymbol{x}_i \equiv [1,x_{1,i}, x_{2,i}, \dots, x_{p,i}]$ and $\boldsymbol{w}=[w_0, w_1, \dots, w_p]$ we get
!bt
\[
p(t_i=1 | \boldsymbol{w}, \boldsymbol{x}_i) = \frac{ \exp{ \left( \boldsymbol{w} \cdot \boldsymbol{x}_i \right) }}{ 1 + \exp{ \left( \boldsymbol{w} \cdot \boldsymbol{x}_i \right) } }.
\]
!et

!split
===== Including more classes =====

Till now we have mainly focused on two classes, the so-called binary
system. Suppose we wish to extend to $K$ classes.  We will then need to have $K-1$ outputs $\boldsymbol{y}_i = \{ y_{1,i}, y_{2,i}, \ldots, y_{K-1,i} \}$. 

!bquestion
Why do we need only $K-1$ outputs if there are $K$ classes?
!equestion

Let us for the sake of simplicity assume we have only two predictors. The activation functions for the outputs are (suppressing the index $i$)

!bt
\[
a_1 = w_{1,0}+w_{1,1}x_1,
\]
!et

!bt
\[
a_2 = w_{2,0}+w_{2,1}x_1,
\]
!et

and so on until the class $C=K-1$ class
!bt
\[
a_{K-1} = w_{(K-1),0}+w_{(K-1),1}x_1,
\]
!et

and the model is specified in term of $K-1$ so-called log-odds or _logit_ transformations $y_j = y(a_j)$.


!split
=== Class probabilities: The Softmax function ===

The transformation of the multiple outputs, as described above, to probabilities for belonging to any of $K$ different classes is done via the so-called _Softmax_ function.

The Softmax function is used in various multiclass classification
methods, such as multinomial logistic regression (also known as
softmax regression), multiclass linear discriminant analysis, naive
Bayes classifiers, and artificial neural networks.  Specifically, the predicted probability for the $k$-th class given a sample
vector $\boldsymbol{x}_i$ and a weighting vector $\boldsymbol{w}$ is (with two
predictors):

!bt
\[
p(t_i=k\vert \boldsymbol{x}_i,  \boldsymbol{w} ) = \frac{\exp{(w_{k,0}+w_{k,1}x_{1,i})}} {1+\sum_{l=1}^{K-1}\exp{(w_{l,0}+w_{l,1}x_{1,i})}}.
\]
!et
It is easy to extend to more predictors. The probability for the final class is 
!bt
\[
p(t_i=K\vert \boldsymbol{x}_i,  \boldsymbol{w} ) = \frac{1} {1+\sum_{l=1}^{K-1}\exp{(w_{l,0}+w_{l,1}x_{1,i})}},
\]
!et
which means that the discrete set of probabilities is properly normalized. 

Our earlier discussions were all specialized to
the case with two classes only. It is easy to see from the above that
what we derived earlier is compatible with these equations.